name: CI for .NET Core API Gateway

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérification du code source depuis le repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer le SDK .NET Core
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Assurez-vous que la version .NET correspond à votre projet

      # Étape 3 : Restaurer les dépendances (en spécifiant le chemin vers le projet dans simpl_cine)
      - name: Restore dependencies
        run: dotnet restore simpl_cine/simpl_cine.sln --no-cache

      # Étape 4 : Compiler la solution
      - name: Build solution
        run: dotnet build simpl_cine/simpl_cine.csproj --configuration Release --no-restore

      # Étape 5 : Exécuter les tests unitaires avec la collecte de couverture de code
      - name: Run tests with code coverage
        run: dotnet test simpl_cine.test/simpl_cine.test.csproj --no-restore --collect:"XPlat Code Coverage" --verbosity minimal

      # Étape 6 : Installer ReportGenerator (pour générer un rapport lisible)
      - name: Install ReportGenerator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool

      # Étape 7 : Générer le rapport de couverture de code
      - name: Generate code coverage report
        run: reportgenerator "-reports:**/coverage.cobertura.xml" "-targetdir:coverage-report" "-reporttypes:Html"

      # Étape 8 : Publier le rapport de couverture de code en tant qu'artefact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage-report

      # Étape 9 : Publier les artefacts de compilation (facultatif)
      - name: Publish artifact (optional)
        run: dotnet publish simpl_cine/simpl_cine.csproj --configuration Release --output ./publish

      # Étape 10 : Publier les résultats des tests (mise à jour vers v3)
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: '**/TestResults/*.trx'
          
# Étape 11 : Upload de la couverture de code vers Codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }} # Utilisé seulement pour les dépôts privés
          files: '**/coverage.cobertura.xml' # Indique le chemin vers le fichier de couverture
          flags: unittests
          name: code-coverage-report
          fail_ci_if_error: true