#CI-Api-Gateway
name: CI for .NET Core API Gateway

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Vérification du code source depuis le repo
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Installer le SDK .NET Core
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x' # Assurez-vous que la version .NET correspond à votre projet

      # Étape 3 : Restaurer les dépendances (en spécifiant le chemin vers le projet dans simpl_cine)
      - name: Restore dependencies
        run: dotnet restore simpl_cine/simpl_cine.sln --no-cache

      # Étape 4 : Compiler la solution
      - name: Build solution
        run: dotnet build simpl_cine/simpl_cine.csproj --configuration Release --no-restore

      # Étape 5 : Exécuter les tests unitaires avec la collecte de couverture de code avec Coverlet
      - name: Run tests with code coverage
        run: dotnet test simpl_cine.test/simpl_cine.test.csproj --no-restore --collect:"XPlat Code Coverage" /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./TestResults/coverage.lcov --verbosity detailed

      # Étape 6 : Convertir le rapport LCOV en format OpenCover
      - name: Convert lcov to opencover
        run: |
          sudo apt-get install -y nodejs
          sudo npm install -g lcov-to-opencover
          lcov-to-opencover -i ./TestResults/coverage.lcov -o ./TestResults/coverage.opencover.xml
      

      # Étape 7 : Analyse SonarCloud avec le rapport de couverture de code
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"Talicke_Api-gateway" /o:"talicke" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.cs.opencover.reportsPaths="./TestResults/coverage.opencover.xml"
          dotnet build simpl_cine/simpl_cine.sln
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Étape 9 : Publier le rapport de couverture de code en tant qu'artefact
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage-report

      # Étape 10 : Publier les artefacts de compilation (facultatif)
      - name: Publish artifact (optional)
        run: dotnet publish simpl_cine/simpl_cine.csproj --configuration Release --output ./publish
